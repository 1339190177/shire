{
  parserClass="com.phodal.shirelang.parser.ShireParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Shire"
  psiImplClassSuffix="Impl"
  psiPackage="com.phodal.shirelang.psi"
  psiImplPackage="com.phodal.shirelang.psi.impl"

  elementTypeHolderClass="com.phodal.shirelang.psi.ShireTypes"
  elementTypeClass="com.phodal.shirelang.psi.ShireElementType"
  tokenTypeClass="com.phodal.shirelang.lexer.ShireTokenType"

  tokens=[
    AGENT_START        = "AGENT_START"
    COMMAND_START      = "COMMAND_START"
    VARIABLE_START     = "VARIABLE_START"
    SYSTEM_START       = "SYSTEM_START"
    CODE_BLOCK_START   = "CODE_BLOCK_START"
    CODE_BLOCK_END     = "CODE_BLOCK_END"
    CODE_BLOCK         = "CODE_BLOCK"
    CODE_CONTENT       = "CODE_CONTENT"
    IDENTIFIER         = "IDENTIFIER"
    LANGUAGE_ID        = "LANGUAGE_ID"
    VARIABLE_ID        = "VARIABLE_ID"
    COMMAND_ID         = "COMMAND_ID"
    AGENT_ID           = "AGENT_ID"
    SYSTEM_ID          = "SYSTEM_ID"
    COLON              = "COLON"
    COMMAND_PROP       = "COMMAND_PROP"
    SHARP              = "SHARP"
    LINE_INFO          = "LINE_INFO"
    FRONTMATTER_START  = "FRONTMATTER_START"
    FRONTMATTER_END    = "FRONTMATTER_END"
    FRONTMATTER_KEY    = "FRONTMATTER_KEY"
    LBRACKET           = "LBRACKET"
    RBRACKET           = "RBRACKET"
    INDENT             = "INDENT"
    OPEN_BRACE         = "{"
    CLOASE_BRACE       = "}"
    LPAREN             = "("
    RPAREN             = ")"
    CASE               = "case"
  ]
}

ShireFile ::= frontMatterHeader? (used | code | TEXT_SEGMENT | NEWLINE | COMMENTS)*

frontMatterHeader ::= FRONTMATTER_START NEWLINE frontMatterEntries FRONTMATTER_END

frontMatterEntries ::= ((frontMatterEntry | patternAction) WHITE_SPACE?)*
frontMatterEntry ::= frontMatterKey WHITE_SPACE? COLON WHITE_SPACE? (frontMatterValue) NEWLINE?
frontMatterKey ::= FRONTMATTER_KEY | QUOTE_STRING | PATTERN
frontMatterValue ::= STRING | NUMBER | QUOTE_STRING | DATE | PATTERN | BOOLEAN | frontMatterArray | (NEWLINE objectKeyValue)
frontMatterArray ::= LBRACKET (frontMatterValue (COMMA frontMatterValue)*) RBRACKET

objectKeyValue ::= (INDENT keyValue NEWLINE?)*
keyValue ::= frontMatterEntry

/* example:
 * ```java
 * /**\/*.java/ {
 *  prompt()
 * }
 */

patternAction ::= matchAction | caseAction
matchAction ::= PATTERN WHITE_SPACE? NEWLINE? OPEN_BRACE (pipelineFunc ('|' pipelineFunc)*)? CLOSE_BRACE
/// find, grep, sed, awk, sort, args
pipelineFunc ::= funcName LPAREN pipelineArgs RPAREN | funcName
funcName ::= 'find' | 'grep' | 'sed' | 'awk' | 'sort' | 'xargs' | IDENTIFIER
pipelineArgs ::= (pipelineArg (COMMA pipelineArg)*)?
pipelineArg ::= STRING | NUMBER | IDENTIFIER | optionArg
optionArg ::= '-' IDENTIFIER (WHITE_SPACE (STRING | NUMBER | IDENTIFIER))?
caseAction ::= CASE WHITE_SPACE PATTERN WHITE_SPACE OPEN_BRACE (caseOption (NEWLINE caseOption)*)? CLOSE_BRACE
caseOption ::= optionPattern WHITE_SPACE OPEN_BRACE pipelineFunc ('|' pipelineFunc)* CLOSE_BRACE
optionPattern ::= STRING | IDENTIFIER

used ::= (
    AGENT_START AGENT_ID
    | COMMAND_START COMMAND_ID (COLON COMMAND_PROP (SHARP LINE_INFO)?)?
    | VARIABLE_START VARIABLE_ID
    | SYSTEM_START SYSTEM_ID COLON NUMBER
)

code ::=  CODE_BLOCK_START LANGUAGE_ID? NEWLINE? code_contents? CODE_BLOCK_END?

code_contents ::= (NEWLINE | CODE_CONTENT)*